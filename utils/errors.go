package utils

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type APIError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Details string `json:"details,omitempty"`
}

func (e *APIError) Error() string {
	description := GetErrorDescription(e.Code)
	if description != "" {
		if e.Details != "" {
			return fmt.Sprintf("Planfix API Error %d: %s - %s", e.Code, description, e.Details)
		}
		return fmt.Sprintf("Planfix API Error %d: %s", e.Code, description)
	}

	if e.Details != "" {
		return fmt.Sprintf("API Error %d: %s - %s", e.Code, e.Message, e.Details)
	}
	return fmt.Sprintf("API Error %d: %s", e.Code, e.Message)
}

func (e *APIError) GetDescription() string {
	return GetErrorDescription(e.Code)
}

func GetErrorDescription(code int) string {
	errorMessages := map[int]string{
		// Общие ошибки
		0:  "Неизвестная ошибка",
		1:  "Неверный токен",
		2:  "Токен неактивен",
		5:  "Доступ к этому методу запрещен для данной области",
		6:  "Доступ к этому методу/объекту запрещен для пользователя",
		10: "Аккаунт заблокирован за спам",
		11: "Аккаунт заморожен",
		16: "Пользователь неактивен",
		20: "Подписка не оплачена",
		21: "Использование API недоступно для бесплатного аккаунта",
		22: "Исчерпан дневной лимит запросов к REST API",
		23: "Достигнут лимит аккаунта по количеству контактов",
		30: "Неверный формат JSON",
		40: "Отсутствует один из обязательных параметров метода",
		41: "Неверное значение параметра",

		// Ошибки задач
		1000: "Задача не существует",
		1001: "Ошибка добавления задачи",
		1002: "Ошибка обновления задачи",

		// Ошибки контактов
		2000: "Контакт не существует",
		2001: "Ошибка добавления контакта",
		2002: "Ошибка обновления данных",
		2003: "При попытке предоставить доступ к Planfix у контакта не установлен email",
		2004: "Неверный формат email",
		2005: "Указанный email уже занят",
		2006: "Полное имя контакта не заполнено",

		// Ошибки проектов
		3000: "Проект не существует",
		3001: "Ошибка добавления проекта",
		3002: "Ошибка обновления проекта",

		// Ошибки сотрудников
		4000: "Сотрудник не существует",
		4001: "Ошибка добавления сотрудника",
		4002: "Ошибка обновления данных сотрудника",
		4003: "Указанный email не уникален",
		4004: "Неверный формат имени пользователя",
		4005: "Указанное имя пользователя не уникально",
		4006: "Полное имя сотрудника не заполнено",

		// Ошибки комментариев
		5000: "Комментарий не существует",
		5001: "Ошибка добавления комментария",
		5002: "Ошибка обновления данных комментария",

		// Ошибки data tags и записей data tag
		6000: "Data tag не существует",
		6010: "Запись data tag не существует",
		6011: "Ошибка добавления записи data tag",
		6012: "Ошибка обновления записи data tag",
		6013: "Ошибка удаления записи data tag",

		// Ошибки файлов
		7000: "Файл не существует",
		7001: "Ошибка добавления файла",
		7002: "Превышен размер загружаемого файла в рамках подписки",
		7003: "Ошибка удаления файла",

		// Ошибки директорий и записей директорий
		8000: "Директория не существует",
		8010: "Запись директории не существует",
		8011: "Ошибка добавления записи директории",
		8012: "Ошибка обновления записи директории",
		8013: "Ошибка удаления записи директории",

		// Ошибки отчетов
		9000: "Отчет не существует",
	}

	if message, exists := errorMessages[code]; exists {
		return message
	}
	return ""
}

func ParseAPIError(resp *http.Response) error {
	var apiErr APIError

	if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
		return fmt.Errorf("HTTP %d: %s", resp.StatusCode, resp.Status)
	}

	return &apiErr
}
